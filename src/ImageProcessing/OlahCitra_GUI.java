/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ImageProcessing;

import java.awt.Dimension;
import java.awt.Toolkit;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.awt.image.BufferedImageOp;
import java.awt.image.ConvolveOp;
import java.awt.image.ImageObserver;
import java.awt.image.Kernel;
/**
 *
 * @author Ryan Fadholi
 * Based on Rezi Apriliansyah's Citra GUI
 */

public class OlahCitra_GUI extends javax.swing.JFrame {
    private String file;
    /**
     * Creates new form OlahCitra
     */
    public OlahCitra_GUI() {
        initComponents();
        mSaveSource.setEnabled(false);
        mSaveProcessed.setEnabled(false);
        mPreprocessing.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Pilih_file = new javax.swing.JFileChooser();
        Tempat_Gambar1 = new javax.swing.JScrollPane();
        Gambar1 = new javax.swing.JLabel();
        Tempat_Gambar2 = new javax.swing.JScrollPane();
        Gambar2 = new javax.swing.JLabel();
        leftImageLabel = new javax.swing.JLabel();
        rightImageLabel = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        mFile = new javax.swing.JMenu();
        mLoad_Image = new javax.swing.JMenuItem();
        mSaveSource = new javax.swing.JMenu();
        SourceBMP = new javax.swing.JMenuItem();
        SourceJPG = new javax.swing.JMenuItem();
        SourcePNG = new javax.swing.JMenuItem();
        mSaveProcessed = new javax.swing.JMenu();
        ProcessedBMP = new javax.swing.JMenuItem();
        ProcessedJPG = new javax.swing.JMenuItem();
        ProcessedPNG = new javax.swing.JMenuItem();
        mClose = new javax.swing.JMenuItem();
        mPreprocessing = new javax.swing.JMenu();
        mHorizontalFlip = new javax.swing.JMenuItem();
        mVerticalFlip = new javax.swing.JMenuItem();
        mGrayscale = new javax.swing.JMenuItem();
        mReset = new javax.swing.JMenuItem();
        mConvolve = new javax.swing.JMenu();
        mBlur = new javax.swing.JMenuItem();
        mSharpen = new javax.swing.JMenuItem();
        mEmboss = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Pengolahan Citra");
        setMinimumSize(new java.awt.Dimension(600, 400));
        setResizable(false);
        setSize(new java.awt.Dimension(1200, 800));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        Tempat_Gambar1.setViewportView(Gambar1);

        Tempat_Gambar2.setViewportView(Gambar2);

        leftImageLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        leftImageLabel.setText("Source Image");

        rightImageLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        rightImageLabel.setText("Processed Image");

        jMenuBar1.setPreferredSize(new java.awt.Dimension(110, 21));

        mFile.setText("File");

        mLoad_Image.setText("Load Image");
        mLoad_Image.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mLoad_ImageActionPerformed(evt);
            }
        });
        mFile.add(mLoad_Image);

        mSaveSource.setText("Save Source Image As....");

        SourceBMP.setText("BMP");
        SourceBMP.setToolTipText("");
        SourceBMP.setPreferredSize(new java.awt.Dimension(50, 22));
        SourceBMP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SourceBMPActionPerformed(evt);
            }
        });
        mSaveSource.add(SourceBMP);

        SourceJPG.setText("JPG");
        SourceJPG.setPreferredSize(new java.awt.Dimension(50, 22));
        SourceJPG.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SourceJPGActionPerformed(evt);
            }
        });
        mSaveSource.add(SourceJPG);

        SourcePNG.setText("PNG");
        SourcePNG.setPreferredSize(new java.awt.Dimension(50, 22));
        SourcePNG.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SourcePNGActionPerformed(evt);
            }
        });
        mSaveSource.add(SourcePNG);

        mFile.add(mSaveSource);

        mSaveProcessed.setLabel("Save Processed Image As....");

        ProcessedBMP.setText("BMP");
        ProcessedBMP.setToolTipText("");
        ProcessedBMP.setPreferredSize(new java.awt.Dimension(50, 22));
        ProcessedBMP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ProcessedBMPActionPerformed(evt);
            }
        });
        mSaveProcessed.add(ProcessedBMP);

        ProcessedJPG.setText("JPG");
        ProcessedJPG.setPreferredSize(new java.awt.Dimension(50, 22));
        ProcessedJPG.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ProcessedJPGActionPerformed(evt);
            }
        });
        mSaveProcessed.add(ProcessedJPG);

        ProcessedPNG.setText("PNG");
        ProcessedPNG.setPreferredSize(new java.awt.Dimension(50, 22));
        ProcessedPNG.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ProcessedPNGActionPerformed(evt);
            }
        });
        mSaveProcessed.add(ProcessedPNG);

        mFile.add(mSaveProcessed);

        mClose.setText("Close");
        mClose.setName(""); // NOI18N
        mClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mCloseActionPerformed(evt);
            }
        });
        mFile.add(mClose);

        jMenuBar1.add(mFile);

        mPreprocessing.setText("Pre-Processing");

        mHorizontalFlip.setText("Flip Horizontally");
        mHorizontalFlip.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mHorizontalFlipActionPerformed(evt);
            }
        });
        mPreprocessing.add(mHorizontalFlip);

        mVerticalFlip.setText("Filp Vertically");
        mVerticalFlip.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mVerticalFlipActionPerformed(evt);
            }
        });
        mPreprocessing.add(mVerticalFlip);

        mGrayscale.setText("Grayscale");
        mGrayscale.setPreferredSize(new java.awt.Dimension(180, 22));
        mGrayscale.setRequestFocusEnabled(false);
        mGrayscale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mGrayscaleActionPerformed(evt);
            }
        });
        mPreprocessing.add(mGrayscale);

        mReset.setText("Reset Processed Image");
        mReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mResetActionPerformed(evt);
            }
        });
        mPreprocessing.add(mReset);

        jMenuBar1.add(mPreprocessing);

        mConvolve.setText("Convolve");

        mBlur.setText("Blur");
        mBlur.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mBlurActionPerformed(evt);
            }
        });
        mConvolve.add(mBlur);

        mSharpen.setText("Sharpen");
        mSharpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mSharpenActionPerformed(evt);
            }
        });
        mConvolve.add(mSharpen);

        mEmboss.setText("Emboss");
        mEmboss.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mEmbossActionPerformed(evt);
            }
        });
        mConvolve.add(mEmboss);

        jMenuBar1.add(mConvolve);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Tempat_Gambar1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(leftImageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 276, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Tempat_Gambar2, javax.swing.GroupLayout.PREFERRED_SIZE, 437, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rightImageLabel))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(leftImageLabel)
                    .addComponent(rightImageLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Tempat_Gambar2, javax.swing.GroupLayout.DEFAULT_SIZE, 520, Short.MAX_VALUE)
                    .addComponent(Tempat_Gambar1))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void RefreshImageCanvas(boolean showRightImage){
         ImageIcon leftIcon = new ImageIcon(OlahCitra.getLeftImage());
         ImageIcon rightIcon = new ImageIcon(OlahCitra.getRightImage());
         
         mPreprocessing.setEnabled(true);
        
         Gambar1.setIcon(leftIcon);
         Tempat_Gambar1.getVerticalScrollBar().setValue(0);
         Tempat_Gambar1.getHorizontalScrollBar().setValue(0);
         mSaveSource.setEnabled(true);
          
         if(showRightImage){
             Gambar2.setIcon(rightIcon);
             Tempat_Gambar1.getVerticalScrollBar().setValue(0);
             Tempat_Gambar1.getHorizontalScrollBar().setValue(0);
             mSaveProcessed.setEnabled(true);
         }
         else{
             Gambar2.setIcon(null);
         }
         
         Tempat_Gambar1.getVerticalScrollBar().setValue(0);
         Tempat_Gambar1.getHorizontalScrollBar().setValue(0);
         
    }
    
    private void chooseSaveDir(boolean isProcessed, String imageType){
        String chosenDir;
        JFileChooser chooser = new JFileChooser();
        chooser.setCurrentDirectory(new java.io.File("."));
        chooser.setDialogTitle("Choose Saving Directory");
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        chooser.setAcceptAllFileFilterUsed(false);

        if (chooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            chosenDir = chooser.getSelectedFile().toString();
            new SaveDialog_GUI(chosenDir,isProcessed,imageType).setVisible(true);
        } else {
            System.out.println("No Selection ");
        }
    }
    
    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        Dimension screensize = Toolkit.getDefaultToolkit().getScreenSize();
        Dimension framesize = getSize();
        setLocation((screensize.width - framesize.width)/2, (screensize.height - framesize.height)/2);
    }//GEN-LAST:event_formWindowActivated

    private void mGrayscaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mGrayscaleActionPerformed

        OlahCitra.processGrayscale();
        RefreshImageCanvas(true);
    }//GEN-LAST:event_mGrayscaleActionPerformed

    private void mCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mCloseActionPerformed
        dispose();
    }//GEN-LAST:event_mCloseActionPerformed

    private void mLoad_ImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mLoad_ImageActionPerformed

        FileNameExtensionFilter textFilter = new FileNameExtensionFilter("Image file","bmp","jpg","png");
        Pilih_file.setFileFilter(textFilter);
        Pilih_file.setSelectedFile(null);
        Pilih_file.showOpenDialog(this);
        file = Pilih_file.getSelectedFile().toString();
        
        if(OlahCitra.setImage(file)){
            RefreshImageCanvas(false);
        }
    }//GEN-LAST:event_mLoad_ImageActionPerformed

    private void SourceBMPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SourceBMPActionPerformed
        chooseSaveDir(false,"BMP");
    }//GEN-LAST:event_SourceBMPActionPerformed

    private void SourceJPGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SourceJPGActionPerformed
        chooseSaveDir(false,"JPG");
    }//GEN-LAST:event_SourceJPGActionPerformed

    private void SourcePNGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SourcePNGActionPerformed
        chooseSaveDir(false,"PNG");
    }//GEN-LAST:event_SourcePNGActionPerformed

    private void ProcessedBMPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ProcessedBMPActionPerformed
        chooseSaveDir(true,"BMP");
    }//GEN-LAST:event_ProcessedBMPActionPerformed

    private void ProcessedJPGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ProcessedJPGActionPerformed
        chooseSaveDir(true,"JPG");
    }//GEN-LAST:event_ProcessedJPGActionPerformed

    private void ProcessedPNGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ProcessedPNGActionPerformed
        chooseSaveDir(true,"PNG");
    }//GEN-LAST:event_ProcessedPNGActionPerformed

    private void mResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mResetActionPerformed
        OlahCitra.resetImage();
        RefreshImageCanvas(true);
    }//GEN-LAST:event_mResetActionPerformed

    private void mBlurActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mBlurActionPerformed
        // TODO add your handling code here:
        double[] blurKernel = {
           0.0625, 0.125, 0.0625,
           0.125 , 0.25 , 0.125 ,
           0.0625, 0.125, 0.0625
        };
        OlahCitra.processConvolve(blurKernel);
        RefreshImageCanvas(true);
    }//GEN-LAST:event_mBlurActionPerformed

    private void mSharpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mSharpenActionPerformed
        double[] sharpenKernel = {
           0 ,-1, 0,
           -1,5 ,-1,
           0 ,-1, 0
        };
        OlahCitra.processConvolve(sharpenKernel);
        RefreshImageCanvas(true);
    }//GEN-LAST:event_mSharpenActionPerformed

    private void mEmbossActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mEmbossActionPerformed
        // TODO add your handling code here:
        double[] embossKernel = {
           -2,-1, 0,
           -1, 1, 1,
            0, 1, 2
        };
        OlahCitra.processConvolve(embossKernel);
        RefreshImageCanvas(true);
    
    }//GEN-LAST:event_mEmbossActionPerformed

    private void mVerticalFlipActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mVerticalFlipActionPerformed
        OlahCitra.processFlipVertical();
        RefreshImageCanvas(true);
    }//GEN-LAST:event_mVerticalFlipActionPerformed

    private void mHorizontalFlipActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mHorizontalFlipActionPerformed
        OlahCitra.processFlipHorizontal();
        RefreshImageCanvas(true);
    }//GEN-LAST:event_mHorizontalFlipActionPerformed

    /**
     * @param args the command line arguments
     */
    
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Gambar1;
    private javax.swing.JLabel Gambar2;
    private javax.swing.JFileChooser Pilih_file;
    private javax.swing.JMenuItem ProcessedBMP;
    private javax.swing.JMenuItem ProcessedJPG;
    private javax.swing.JMenuItem ProcessedPNG;
    private javax.swing.JMenuItem SourceBMP;
    private javax.swing.JMenuItem SourceJPG;
    private javax.swing.JMenuItem SourcePNG;
    private javax.swing.JScrollPane Tempat_Gambar1;
    private javax.swing.JScrollPane Tempat_Gambar2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JLabel leftImageLabel;
    private javax.swing.JMenuItem mBlur;
    private javax.swing.JMenuItem mClose;
    private javax.swing.JMenu mConvolve;
    private javax.swing.JMenuItem mEmboss;
    private javax.swing.JMenu mFile;
    private javax.swing.JMenuItem mGrayscale;
    private javax.swing.JMenuItem mHorizontalFlip;
    private javax.swing.JMenuItem mLoad_Image;
    private javax.swing.JMenu mPreprocessing;
    private javax.swing.JMenuItem mReset;
    private javax.swing.JMenu mSaveProcessed;
    private javax.swing.JMenu mSaveSource;
    private javax.swing.JMenuItem mSharpen;
    private javax.swing.JMenuItem mVerticalFlip;
    private javax.swing.JLabel rightImageLabel;
    // End of variables declaration//GEN-END:variables
}
